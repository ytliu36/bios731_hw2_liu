"0","newton_logit = function(X, y, beta0 = c(0,0), tol = 1e-6, max_iter = 100) {"
"0",""
"0","  beta_cur = beta0"
"0","  beta_history = gradient_vec = matrix(NA, nrow = max_iter, "
"0","                                       ncol = length(beta0))"
"0","  for (iter in 1:max_iter) {"
"0","    "
"0","    # store results"
"0","    beta_history[iter,] = beta_cur"
"0","    "
"0","    # Compute the gradient and hessian"
"0","    gradient = as.numeric(t(y-exp(X%*%beta_cur)/(1+exp(X%*%beta_cur)))%*%X)"
"0","    "
"0","    hessian_ls = as.list(rep(NA, length.out = length(y)))"
"0","    for(i in 1:length(y)){"
"0","      hessian_ls[[i]] = as.numeric(exp(X[i,]%*%beta_cur)/(1+exp(X[i,]%*%beta_cur))^2) * tcrossprod(X[i,], X[i,])"
"0","    }"
"0","    "
"0","    hessian <- -1 * Reduce(""+"", hessian_ls)"
"0","    "
"0","    gradient_vec[iter,] = gradient"
"0","    "
"0","    # Check stopping criterion"
"0","    if(sqrt(sum(gradient^2)) < tol){"
"0","      message(""Converged in"", iter, ""iterations.\n"")"
"0","      break"
"0","    }"
"0","    "
"0","    # Update the solution"
"0","    beta_cur = beta_cur - solve(hessian) %*% gradient"
"0","  }"
"0","  hessian_ls = as.list(rep(NA, length.out = length(y)))"
"0","  for(i in 1:length(y)){"
"0","    hessian_ls[[i]] = as.numeric(exp(X[i,]%*%beta_cur)/(1+exp(X[i,]%*%beta_cur))^2) * tcrossprod(X[i,], X[i,])"
"0","  }"
"0","    "
"0","  var <- solve(Reduce(""+"", hessian_ls))"
"0","    "
"0","  return(list(solution = beta_cur, "
"0","              beta_history = beta_history,"
"0","              gradient = gradient_vec,"
"0","              var = var,"
"0","              converged = (iter < max_iter),"
"0","              niter = iter))"
"0","}"
