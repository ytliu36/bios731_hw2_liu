for(i in 1:B){
index <- sample(1:dim(veteran)[1], dim(veteran)[1], replace = TRUE)
boot_mean[i] = EM_exp(veteran$time[index], veteran$status[index])$lambda
}
CI_lower_em <- fit.EM$lambda - 1.96 * sd(boot_mean)
CI_upper_em <- fit.EM$lambda + 1.96 * sd(boot_mean)
print(paste0("95% CI for lambda (EM): (", CI_lower_em,", ", CI_upper_em, ")"))
# the AFT model
fit.AFT<- survreg(Surv(time, status) ~ 1, data = veteran, dist = "weibull", scale = 1)
lambda_aft <- exp(fit.AFT$coefficients)
print(paste("Lambda from AFT model:", lambda_aft))
# Compute 95% CI for lambda using AFT model
se_lambda_aft <- sqrt(fit.AFT$var[1]) * lambda_aft  # Delta method
CI_lower_aft <- lambda_aft - 1.96 * se_lambda_aft
CI_upper_aft <- lambda_aft + 1.96 * se_lambda_aft
print(paste0("95% CI for lambda (AFT): (", CI_lower_aft,", ", CI_upper_aft, ")"))
library(survival)
library(dplyr)
# EM algorithm
fit.EM<-EM_exp(veteran$time, veteran$status)
print(paste("Lambda from EM algorithm:", fit.EM$lambda))
# Compute confidence interval
# non-parametric bootstrap
set.seed(123)
B = 5000
boot_mean = rep(NA, B)
for(i in 1:B){
index <- sample(1:dim(veteran)[1], dim(veteran)[1], replace = TRUE)
boot_mean[i] = EM_exp(veteran$time[index], veteran$status[index])$lambda
}
CI_lower_em <- fit.EM$lambda - 1.96 * sd(boot_mean)
CI_upper_em <- fit.EM$lambda + 1.96 * sd(boot_mean)
print(paste0("95% CI for lambda (EM): (", CI_lower_em,", ", CI_upper_em, ")"))
# the AFT model
fit.AFT<- survreg(Surv(time, status) ~ 1, data = veteran, dist = "weibull", scale = 1)
lambda_aft <- exp(fit.AFT$coefficients)
print(paste("Lambda from AFT model:", lambda_aft))
# Compute 95% CI for lambda using AFT model
se_lambda_aft <- sqrt(fit.AFT$var[1]) * lambda_aft  # Delta method
CI_lower_aft <- lambda_aft - 1.96 * se_lambda_aft
CI_upper_aft <- lambda_aft + 1.96 * se_lambda_aft
print(paste0("95% CI for lambda (AFT): (", CI_lower_aft,", ", CI_upper_aft, ")"))
library(survival)
library(dplyr)
# EM algorithm
fit.EM<-EM_exp(veteran$time, veteran$status)
print(paste("Lambda from EM algorithm:", fit.EM$lambda))
# Compute confidence interval
# non-parametric bootstrap
set.seed(123)
B = 5000
boot_mean = rep(NA, B)
for(i in 1:B){
index <- sample(1:dim(veteran)[1], dim(veteran)[1], replace = TRUE)
boot_mean[i] = EM_exp(veteran$time[index], veteran$status[index])$lambda
}
quantile(boot_mean, probs = c(0.025,0.975))
#print(paste0("95% CI for lambda (EM): (", CI_lower_em,", ", CI_upper_em, ")"))
# the AFT model
fit.AFT<- survreg(Surv(time, status) ~ 1, data = veteran, dist = "weibull", scale = 1)
lambda_aft <- exp(fit.AFT$coefficients)
print(paste("Lambda from AFT model:", lambda_aft))
# Compute 95% CI for lambda using AFT model
se_lambda_aft <- sqrt(fit.AFT$var[1]) * lambda_aft  # Delta method
CI_lower_aft <- lambda_aft - 1.96 * se_lambda_aft
CI_upper_aft <- lambda_aft + 1.96 * se_lambda_aft
print(paste0("95% CI for lambda (AFT): (", CI_lower_aft,", ", CI_upper_aft, ")"))
library(survival)
library(dplyr)
# EM algorithm
fit.EM<-EM_exp(veteran$time, veteran$status)
print(paste("Lambda from EM algorithm:", fit.EM$lambda))
# Compute confidence interval
# non-parametric bootstrap
set.seed(123)
B = 10000
boot_mean = rep(NA, B)
for(i in 1:B){
index <- sample(1:dim(veteran)[1], dim(veteran)[1], replace = TRUE)
boot_mean[i] = EM_exp(veteran$time[index], veteran$status[index])$lambda
}
quantile(boot_mean, probs = c(0.025,0.975))
# CI_lower_em <- fit.EM$lambda - 1.96 * sd(boot_mean)
# CI_upper_em <- fit.EM$lambda + 1.96 * sd(boot_mean)
#
# print(paste0("95% CI for lambda (EM): (", CI_lower_em,", ", CI_upper_em, ")"))
# the AFT model
fit.AFT<- survreg(Surv(time, status) ~ 1, data = veteran, dist = "weibull", scale = 1)
lambda_aft <- exp(fit.AFT$coefficients)
print(paste("Lambda from AFT model:", lambda_aft))
# Compute 95% CI for lambda using AFT model
se_lambda_aft <- sqrt(fit.AFT$var[1]) * lambda_aft  # Delta method
CI_lower_aft <- lambda_aft - 1.96 * se_lambda_aft
CI_upper_aft <- lambda_aft + 1.96 * se_lambda_aft
print(paste0("95% CI for lambda (AFT): (", CI_lower_aft,", ", CI_upper_aft, ")"))
library(survival)
library(dplyr)
# EM algorithm
fit.EM<-EM_exp(veteran$time, veteran$status)
print(paste("Lambda from EM algorithm:", fit.EM$lambda))
# Compute confidence interval
# non-parametric bootstrap
set.seed(123)
B = 10000
boot_mean = rep(NA, B)
for(i in 1:B){
index <- sample(1:dim(veteran)[1], dim(veteran)[1], replace = TRUE)
boot_mean[i] = EM_exp(veteran$time[index], veteran$status[index])$lambda
}
quantile(boot_mean, probs = c(0.025,0.975))
# CI_lower_em <- fit.EM$lambda - 1.96 * sd(boot_mean)
# CI_upper_em <- fit.EM$lambda + 1.96 * sd(boot_mean)
#
print(paste0("95% CI for lambda (EM): (", quantile(boot_mean, probs = c(0.025,0.975))")"))
library(survival)
library(dplyr)
# EM algorithm
fit.EM<-EM_exp(veteran$time, veteran$status)
print(paste("Lambda from EM algorithm:", fit.EM$lambda))
# Compute confidence interval
# non-parametric bootstrap
set.seed(123)
B = 10000
boot_mean = rep(NA, B)
for(i in 1:B){
index <- sample(1:dim(veteran)[1], dim(veteran)[1], replace = TRUE)
boot_mean[i] = EM_exp(veteran$time[index], veteran$status[index])$lambda
}
quantile(boot_mean, probs = c(0.025,0.975))
# CI_lower_em <- fit.EM$lambda - 1.96 * sd(boot_mean)
# CI_upper_em <- fit.EM$lambda + 1.96 * sd(boot_mean)
#
print(paste0("95% CI for lambda (EM): (", quantile(boot_mean, probs = c(0.025,0.975)),")"))
# the AFT model
fit.AFT<- survreg(Surv(time, status) ~ 1, data = veteran, dist = "weibull", scale = 1)
lambda_aft <- exp(fit.AFT$coefficients)
print(paste("Lambda from AFT model:", lambda_aft))
# Compute 95% CI for lambda using AFT model
se_lambda_aft <- sqrt(fit.AFT$var[1]) * lambda_aft  # Delta method
CI_lower_aft <- lambda_aft - 1.96 * se_lambda_aft
CI_upper_aft <- lambda_aft + 1.96 * se_lambda_aft
print(paste0("95% CI for lambda (AFT): (", CI_lower_aft,", ", CI_upper_aft, ")"))
library(survival)
library(dplyr)
# EM algorithm
fit.EM<-EM_exp(veteran$time, veteran$status)
print(paste("Lambda from EM algorithm:", fit.EM$lambda))
# Compute confidence interval
# non-parametric bootstrap
set.seed(123)
B = 10000
boot_mean = rep(NA, B)
for(i in 1:B){
index <- sample(1:dim(veteran)[1], dim(veteran)[1], replace = TRUE)
boot_mean[i] = EM_exp(veteran$time[index], veteran$status[index])$lambda
}
em_CI<-quantile(boot_mean, probs = c(0.025,0.975))
# CI_lower_em <- fit.EM$lambda - 1.96 * sd(boot_mean)
# CI_upper_em <- fit.EM$lambda + 1.96 * sd(boot_mean)
#
print(paste0("95% CI for lambda (EM): (", em_CI[1],",",em_CI[2],")"))
# the AFT model
fit.AFT<- survreg(Surv(time, status) ~ 1, data = veteran, dist = "weibull", scale = 1)
lambda_aft <- exp(fit.AFT$coefficients)
print(paste("Lambda from AFT model:", lambda_aft))
# Compute 95% CI for lambda using AFT model
se_lambda_aft <- sqrt(fit.AFT$var[1]) * lambda_aft  # Delta method
CI_lower_aft <- lambda_aft - 1.96 * se_lambda_aft
CI_upper_aft <- lambda_aft + 1.96 * se_lambda_aft
print(paste0("95% CI for lambda (AFT): (", CI_lower_aft,", ", CI_upper_aft, ")"))
library(survival)
library(dplyr)
# EM algorithm
fit.EM<-EM_exp(veteran$time, veteran$status)
print(paste("Lambda from EM algorithm:", fit.EM$lambda))
# Compute confidence interval
# non-parametric bootstrap
set.seed(123)
B = 10000
boot_mean = rep(NA, B)
for(i in 1:B){
index <- sample(1:dim(veteran)[1], dim(veteran)[1], replace = TRUE)
boot_mean[i] = EM_exp(veteran$time[index], veteran$status[index])$lambda
}
em_CI<-quantile(boot_mean, probs = c(0.025,0.975))
print(paste0("95% CI for lambda (EM): (", em_CI[1],",",em_CI[2],")"))
# the AFT model
fit.AFT<- survreg(Surv(time, status) ~ 1, data = veteran, dist = "weibull", scale = 1)
lambda_aft <- exp(fit.AFT$coefficients)
print(paste("Lambda from AFT model:", lambda_aft))
# Compute 95% CI for lambda using AFT model
se_lambda_aft <- sqrt(fit.AFT$var[1]) * lambda_aft  # Delta method
CI_lower_aft <- lambda_aft - 1.96 * se_lambda_aft
CI_upper_aft <- lambda_aft + 1.96 * se_lambda_aft
print(paste0("95% CI for lambda (AFT): (", CI_lower_aft,", ", CI_upper_aft, ")"))
y<-rnorm(100,0,1)
iter = 1
tol_criteria = Inf
# define vectors to store elements of interest
max_iter = 100
tol = 0.00000001
objective = theta_vec = rep(NA, length = max_iter)
####
## Add initial value
theta = theta0
y<-rnorm(100,0,1)
theta0 = 1
iter = 1
tol_criteria = Inf
# define vectors to store elements of interest
max_iter = 100
tol = 0.00000001
objective = theta_vec = rep(NA, length = max_iter)
####
## Add initial value
theta = theta0
while(iter < max_iter  & tol_criteria > tol){
###############################################################
## Majorization
###############################################################
objective[iter] = 1/2 *sum((y-theta)^2/abs(y-theta) + abs(y-theta))
w = 1/abs(y-theta)
###############################################################
## Minimization
###############################################################
theta = sum(w * y)/sum(w)
m[iter] = theta
###############################################################
if(iter > 1){
tol_criteria = abs(objective[iter] - objective[iter-1])
}
iter = iter + 1
message(paste0("iteration: ", iter, "; ll: ", round(tol_criteria, 4)))
}
iter = 1
tol_criteria = Inf
# define vectors to store elements of interest
max_iter = 100
tol = 0.00000001
objective = theta_vec = rep(NA, length = max_iter)
####
## Add initial value
theta = theta0
while(iter < max_iter  & tol_criteria > tol){
###############################################################
## Majorization
###############################################################
objective[iter] = 1/2 *sum((y-theta)^2/abs(y-theta) + abs(y-theta))
w = 1/abs(y-theta)
###############################################################
## Minimization
###############################################################
theta = sum(w * y)/sum(w)
theta_vec[iter] = theta
###############################################################
if(iter > 1){
tol_criteria = abs(objective[iter] - objective[iter-1])
}
iter = iter + 1
message(paste0("iteration: ", iter, "; ll: ", round(tol_criteria, 4)))
}
y<-rnorm(100,0,1)
theta0 = 1
median(y)
iter = 1
tol_criteria = Inf
# define vectors to store elements of interest
max_iter = 100
tol = 0.00000001
objective = theta_vec = rep(NA, length = max_iter)
####
## Add initial value
theta = theta0
while(iter < max_iter  & tol_criteria > tol){
###############################################################
## Majorization
###############################################################
objective[iter] = 1/2 *sum((y-theta)^2/abs(y-theta) + abs(y-theta))
w = 1/abs(y-theta)
###############################################################
## Minimization
###############################################################
theta = sum(w * y)/sum(w)
theta_vec[iter] = theta
###############################################################
if(iter > 1){
tol_criteria = abs(objective[iter] - objective[iter-1])
}
iter = iter + 1
message(paste0("iteration: ", iter, "; ll: ", round(tol_criteria, 4)))
}
theta
iter = 1
tol_criteria = Inf
# define vectors to store elements of interest
max_iter = 100
tol = 0.00000001
objective = theta_vec = rep(NA, length = max_iter)
####
## Add initial value
theta = theta0
while(iter < max_iter  & tol_criteria > tol){
###############################################################
## Majorization
###############################################################
objective[iter] = 1/2 *sum((y-theta)^2/abs(y-theta) + abs(y-theta))
w = 1/abs(y-theta)
###############################################################
## Minimization
###############################################################
theta = sum(w * y)/sum(w)
theta_vec[iter] = theta
###############################################################
if(iter > 1){
tol_criteria = abs(objective[iter] - objective[iter-1])
}
iter = iter + 1
message(paste0("iteration: ", iter, "; ll: ", round(tol_criteria, 4)))
}
theta
y<-rnorm(100,0,1)
theta0 = 1
median(y)
iter = 1
tol_criteria = Inf
# define vectors to store elements of interest
max_iter = 100
tol = 0.00000001
objective = theta_vec = rep(NA, length = max_iter)
####
## Add initial value
theta = theta0
while(iter < max_iter  & tol_criteria > tol){
###############################################################
## Majorization
###############################################################
objective[iter] = 1/2 *sum((y-theta)^2/abs(y-theta) + abs(y-theta))
w = 1/abs(y-theta)
###############################################################
## Minimization
###############################################################
theta = sum(w * y)/sum(w)
theta_vec[iter] = theta
###############################################################
if(iter > 1){
tol_criteria = abs(objective[iter] - objective[iter-1])
}
iter = iter + 1
message(paste0("iteration: ", iter, "; ll: ", round(tol_criteria, 4)))
}
theta
iter = 1
tol_criteria = Inf
# define vectors to store elements of interest
max_iter = 100
tol = 0.00000001
objective = theta_vec = rep(NA, length = max_iter)
####
## Add initial value
theta = theta0
while(iter < max_iter  & tol_criteria > tol){
###############################################################
## Majorization
###############################################################
objective[iter] = 1/2 *sum((y-theta)^2/abs(y-theta) + abs(y-theta))
w = 1/abs(y-theta)
###############################################################
## Minimization
###############################################################
theta = sum(w * y)/sum(w)
theta_vec[iter] = theta
###############################################################
if(iter > 1){
tol_criteria = abs(objective[iter] - objective[iter-1])
}
iter = iter + 1
message(paste0("iteration: ", iter, "; ll: ", round(tol_criteria, 4)))
}
theta
iter = 1
tol_criteria = Inf
# define vectors to store elements of interest
max_iter = 100
tol = 0.00000001
objective = theta_vec = rep(NA, length = max_iter)
####
## Add initial value
theta = theta0
while(iter < max_iter  & tol_criteria > tol){
###############################################################
## Majorization
###############################################################
objective[iter] = 1/2 *sum((y-theta)^2/abs(y-theta) + abs(y-theta))
w = 1/abs(y-theta)
###############################################################
## Minimization
###############################################################
theta = sum(w * y)/sum(w)
theta_vec[iter] = theta
###############################################################
if(iter > 1){
tol_criteria = abs(objective[iter] - objective[iter-1])
}
iter = iter + 1
message(paste0("iteration: ", iter, "; ll: ", round(tol_criteria, 4)))
}
theta
y<-rnorm(100,0,1)
theta0 = 1
median(y)
y<-rnorm(100,0,1)
theta0 = 1
median(y)
iter = 1
tol_criteria = Inf
# define vectors to store elements of interest
max_iter = 100
tol = 0.00000001
objective = theta_vec = rep(NA, length = max_iter)
####
## Add initial value
theta = theta0
while(iter < max_iter  & tol_criteria > tol){
###############################################################
## Majorization
###############################################################
objective[iter] = 1/2 *sum((y-theta)^2/abs(y-theta) + abs(y-theta))
w = 1/abs(y-theta)
###############################################################
## Minimization
###############################################################
theta = sum(w * y)/sum(w)
theta_vec[iter] = theta
###############################################################
if(iter > 1){
tol_criteria = abs(objective[iter] - objective[iter-1])
}
iter = iter + 1
message(paste0("iteration: ", iter, "; ll: ", round(tol_criteria, 4)))
}
theta
library(BradleyTerry2)
data(baseball)
head(baseball)
View(baseball)
iter = 1
tol_criteria = Inf
# define vectors to store elements of interest
max_iter = 100
tol = 0.00000001
objective = theta_vec = rep(NA, length = max_iter)
####
## Add initial value
theta = theta0 = 0.5
while(iter < max_iter  & tol_criteria > tol){
###############################################################
## Majorization
###############################################################
# objective[iter] = 1/2 *sum((y-theta)^2/abs(y-theta) + abs(y-theta))
# w = 1/abs(y-theta)
###############################################################
## Minimization
###############################################################
theta_new = 6/((6+7)/(1+theta))
theta_vec[iter] = theta
###############################################################
if(iter > 1){
tol_criteria = abs(objective[iter] - objective[iter-1])
}
iter = iter + 1
theta = theta_new
message(paste0("iteration: ", iter, "; ll: ", round(tol_criteria, 4)))
}
iter = 1
tol_criteria = Inf
# define vectors to store elements of interest
max_iter = 100
tol = 0.00000001
objective = theta_vec = rep(NA, length = max_iter)
####
## Add initial value
theta = theta0 = 0.5
while(iter < max_iter  & tol_criteria > tol){
###############################################################
## Majorization
###############################################################
# objective[iter] = 1/2 *sum((y-theta)^2/abs(y-theta) + abs(y-theta))
# w = 1/abs(y-theta)
###############################################################
## Minimization
###############################################################
theta_new = 6/((6+7)/(1+theta))
theta_vec[iter] = theta
###############################################################
if(iter > 1){
tol_criteria = abs(theta_new - theta)
}
iter = iter + 1
theta = theta_new
message(paste0("iteration: ", iter, "; ll: ", round(tol_criteria, 4)))
}
theta
baseball_filtered <- baseball %>%
filter((home.team == "Milwaukee" & away.team == "New York") | (home.team == "New York" & away.team == "Milwaukee"))
View(baseball_filtered)
baseball_filtered <- baseball %>%
filter((home.team == "Milwaukee" & away.team == "New York") | (home.team == "New York" & away.team == "Milwaukee"))
M_NY<-c(baseball_filtered[1,1]+baseball_filtered[2,2], baseball_filtered[1,2]+baseball_filtered[2,1])
class(baseball_filtered[1,1])
baseball_filtered <- baseball %>%
filter((home.team == "Milwaukee" & away.team == "New York") | (home.team == "New York" & away.team == "Milwaukee"))
M_NY<-c(baseball_filtered[1,3]+baseball_filtered[2,4], baseball_filtered[1,4]+baseball_filtered[2,3])
